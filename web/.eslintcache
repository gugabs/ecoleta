[{"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\index.tsx":"1","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\App.tsx":"2","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\pages\\home\\index.tsx":"3","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\pages\\Home\\index.tsx":"4","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\pages\\CreatePoint\\index.tsx":"5","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\routes.tsx":"6","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\services\\api.ts":"7","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\components\\Dropzone\\index.tsx":"8","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\components\\Leaflet\\index.tsx":"9"},{"size":197,"mtime":1608864461748,"results":"10","hashOfConfig":"11"},{"size":175,"mtime":1608953980348,"results":"12","hashOfConfig":"11"},{"size":964,"mtime":1608944616995,"results":"13","hashOfConfig":"11"},{"size":1382,"mtime":1609209018447,"results":"14","hashOfConfig":"11"},{"size":9815,"mtime":1611814243281,"results":"15","hashOfConfig":"11"},{"size":437,"mtime":1609192086692,"results":"16","hashOfConfig":"11"},{"size":133,"mtime":1609190942337,"results":"17","hashOfConfig":"11"},{"size":1447,"mtime":1609364351744,"results":"18","hashOfConfig":"11"},{"size":2698,"mtime":1611813978618,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"nuk8me",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\index.tsx",[],["42","43"],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\App.tsx",[],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\pages\\home\\index.tsx",["44"],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\pages\\Home\\index.tsx",[],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\pages\\CreatePoint\\index.tsx",["45"],"import React, { useEffect, useState, ChangeEvent, FormEvent } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nimport api from \"../../services/api\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\n\r\nimport ecoletaLogo from \"../../assets/img/logo.svg\";\r\n\r\nimport Dropzone from \"../../components/Dropzone\";\r\n\r\nimport Leaflet from \"../../components/Leaflet\";\r\nimport MarkerLocation from \"../../components/Leaflet\";\r\n\r\nconst CreatePoint = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    async function handleSubmit(event: FormEvent) {\r\n\r\n        event.preventDefault();\r\n\r\n        const {\r\n            name,\r\n            email,\r\n            whatsapp\r\n        } = formData;\r\n\r\n        const state = selectedState;\r\n        const city = selectedCity;\r\n\r\n        const coordinates = selectedLocation;\r\n\r\n        const items = selectedItems;\r\n\r\n        const data = new FormData();\r\n\r\n        data.append(\"name\", name);\r\n        data.append(\"email\", email);\r\n        data.append(\"whatsapp\", whatsapp);\r\n        data.append(\"state\", state);\r\n        data.append(\"city\", city);\r\n        data.append(\"latitude\", String(coordinates.coords.lat));\r\n        data.append(\"longitude\", String(coordinates.coords.lng));\r\n        data.append(\"items\", items.join(','));\r\n\r\n        if(uploadedImage)\r\n        {\r\n            data.append(\"image\", uploadedImage);\r\n        }\r\n\r\n        await api.post(\"points\", data);\r\n\r\n        alert(\"Ponto cadastrado!\");\r\n\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    const [uploadedImage, setUploadedImage] = useState<File>();\r\n\r\n    const emptyInput = \"\";\r\n\r\n    const [formData, setFormData] = useState({\r\n\r\n        name: emptyInput,\r\n        email: emptyInput,\r\n        whatsapp: emptyInput\r\n\r\n    });\r\n\r\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\r\n\r\n        const {\r\n            name,\r\n            value\r\n        } = event.target;\r\n\r\n        setFormData({ ...formData, [name]: value });\r\n\r\n    }\r\n\r\n    interface IBGE_UFs {\r\n\r\n        sigla: string;\r\n        nome: string;\r\n\r\n    }\r\n\r\n    const [states, setStates] = useState<IBGE_UFs[]>([]);\r\n\r\n    useEffect(() => {\r\n        axios.get<IBGE_UFs[]>(\"https://servicodados.ibge.gov.br/api/v1/localidades/estados/\").then(response => {\r\n\r\n            const states: IBGE_UFs[] = response.data.map(uf => {\r\n\r\n                return {\r\n\r\n                    sigla: uf.sigla,\r\n                    nome: uf.nome\r\n\r\n                };\r\n\r\n            });\r\n\r\n            setStates(states);\r\n\r\n        });\r\n    }, []);\r\n\r\n    const [selectedState, setSelectedState] = useState('0');\r\n\r\n    function handleSelectState(event: ChangeEvent<HTMLSelectElement>) {\r\n\r\n        setSelectedState(event.target.value);\r\n\r\n    }\r\n\r\n    interface IBGE_Cities {\r\n\r\n        nome: string;\r\n\r\n    }\r\n\r\n    const [cities, setCities] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(selectedState === '0')\r\n            return;\r\n\r\n        axios.get<IBGE_Cities[]>(\"https://servicodados.ibge.gov.br/api/v1/localidades/estados/\" + selectedState + \"/municipios\").then(response => {\r\n\r\n            const cities = response.data.map(city => city.nome);\r\n\r\n            setCities(cities);\r\n\r\n        });\r\n\r\n    }, [selectedState]);\r\n\r\n    const [selectedCity, setSelectedCities] = useState('0');\r\n\r\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>) {\r\n\r\n        setSelectedCities(event.target.value);\r\n\r\n    }\r\n\r\n    interface SelectedLocation {\r\n\r\n        coords: {\r\n\r\n            lat: number;\r\n            lng: number;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const [selectedLocation, setSelectedLocation] = useState<SelectedLocation>({ coords: { lat: 0, lng: 0 } });\r\n\r\n    interface Item {\r\n\r\n        id: number;\r\n        title: string;\r\n        image_url: string;\r\n\r\n    }\r\n\r\n    const [items, setItems] = useState<Item[]>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        api.get(\"items\").then(response => {\r\n\r\n            setItems(response.data);\r\n\r\n        });\r\n\r\n    }, []);\r\n\r\n    const [selectedItems, setSelectedItemms] = useState<number[]>([]);\r\n\r\n    function handleSelectItem(id: number) {\r\n\r\n        const alreadySelected = selectedItems.includes(id);\r\n\r\n        if(alreadySelected)\r\n        {\r\n            const filteredItems = selectedItems.filter(item => item !== id);\r\n\r\n            setSelectedItemms(filteredItems);\r\n        }\r\n        else\r\n        {\r\n            setSelectedItemms([...selectedItems, id]);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        \r\n        <div id=\"page-create-point\">\r\n            <header>\r\n                <img src={ ecoletaLogo } alt=\"Logotipo Ecoleta\"/>\r\n\r\n                <Link to='/'>\r\n                    <FiArrowLeft />\r\n                    Voltar\r\n                </Link>\r\n            </header>\r\n\r\n            <form onSubmit={ handleSubmit }>\r\n                <h1>Cadastrar ponto de coleta</h1>\r\n\r\n                <Dropzone onImageUpload={ setUploadedImage }/>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Dados</h2>\r\n                    </legend>\r\n\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"name\">Nome da entidade</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            onChange={ handleInputChange }\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"email\">E-mail</label>\r\n                            <input \r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                onChange={ handleInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"whatsapp\">WhatsApp</label>\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"whatsapp\"\r\n                                id=\"whatsapp\"\r\n                                onChange={ handleInputChange }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Endereço</h2>\r\n                        <span>Após preencher os campos, selecione o local da entidade no mapa.</span>\r\n                    </legend>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"uf\">Estado</label>\r\n                            <select name=\"uf\" id=\"uf\" value={ selectedState } onChange={ handleSelectState }>\r\n                                <option value='0'>Selecione uma UF</option>\r\n                                {\r\n                                    states.map(state => {\r\n\r\n                                        return (\r\n\r\n                                            <option key={ state.sigla } value={ state.sigla }>{ state.nome + \" - \" + state.sigla }</option>\r\n\r\n                                        );\r\n\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"city\">Cidade</label>\r\n                            <select name=\"city\" id=\"city\" value={ selectedCity } onChange={handleSelectCity}>\r\n                                <option value='0'>Selecione uma cidade</option>\r\n                                {\r\n                                    cities.map(city => {\r\n\r\n                                        return (\r\n\r\n                                            <option key={ city } value={ city }>{ city }</option>\r\n\r\n                                        );\r\n\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Leaflet onLocationSelect={ setSelectedLocation } />\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Itens de coleta</h2>\r\n                        <span>Selecione um ou mais itens abaixo.</span>\r\n                    </legend>\r\n\r\n                    <ul className=\"items-grid\">\r\n                        {\r\n                            items.map(item => {\r\n\r\n                                return (\r\n\r\n                                        <li \r\n                                            key={ item.id } \r\n                                            onClick={ () => handleSelectItem(item.id) }\r\n                                            className={ selectedItems.includes(item.id) ? \"selected\" : \"\" }\r\n                                        >\r\n                                        <img\r\n                                            src={ item.image_url }\r\n                                            alt={ item.title }\r\n                                        />\r\n                                        <span>{ item.title }</span>\r\n                                    </li>\r\n\r\n                                );\r\n\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </fieldset>\r\n\r\n                <button type=\"submit\">\r\n                    Cadastrar ponto de coleta\r\n                </button>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CreatePoint;\r\n","C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\routes.tsx",[],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\services\\api.ts",[],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\components\\Dropzone\\index.tsx",[],["46","47"],"C:\\Users\\Guga\\Documents\\www\\ecoleta\\web\\src\\components\\Leaflet\\index.tsx",["48","49","50"],"import React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { MapContainer, TileLayer, Marker, useMapEvents, useMap, MapConsumer } from \"react-leaflet\";\r\nimport { NumericLiteral } from \"typescript\";\r\n\r\nimport \"./style.css\";\r\n\r\ninterface Props \r\n{\r\n    coords: {\r\n        lat: number;\r\n        lng: number;\r\n    }\r\n}\r\n\r\nconst UserLocation = () => {\r\n\r\n    const [locationFound, setLocationFound] = useState(false);\r\n\r\n    const map = useMap();\r\n\r\n    map.locate();\r\n\r\n    useMapEvents({\r\n        locationfound(e) {\r\n\r\n            if(!locationFound)\r\n            {\r\n                map.flyTo(e.latlng, 12);\r\n\r\n                setLocationFound(true);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    return null;\r\n\r\n}\r\n\r\ninterface SelectedLocation {\r\n\r\n    onLocationSelect: (location: Props) => void;\r\n\r\n}\r\n\r\nconst Leaflet: React.FC<SelectedLocation> = ({ onLocationSelect }) => {\r\n\r\n    const [markerLocation, setMarkerLocation] = useState<Props>({ coords: { lat: 0, lng: 0 } });\r\n\r\n    useEffect(() => {\r\n\r\n        onLocationSelect(markerLocation);\r\n\r\n    }, [markerLocation.coords.lat, markerLocation.coords.lng])\r\n\r\n    return(\r\n\r\n        <MapContainer center={ [0, 0] } zoom={ 12 }>\r\n            <TileLayer \r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            <UserLocation />\r\n\r\n            <MapConsumer>\r\n                {\r\n                    function MarkerLocation()\r\n                    {\r\n\r\n                        const map = useMapEvents({\r\n\r\n                            click(e) {\r\n\r\n                                const newMarkerLocation = {\r\n                                    coords: {\r\n                                        lat: e.latlng.lat,\r\n                                        lng: e.latlng.lng\r\n                                    }\r\n                                }\r\n                    \r\n                                setMarkerLocation(newMarkerLocation);\r\n                    \r\n                                map.flyTo([newMarkerLocation.coords.lat, newMarkerLocation.coords.lng], 12);                                \r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                        return markerLocation == null ? null :\r\n                        (\r\n                    \r\n                            <Marker position={ [markerLocation.coords.lat, markerLocation.coords.lng] } />\r\n                    \r\n                        );\r\n\r\n                    }\r\n                }\r\n            </MapConsumer>\r\n        </MapContainer>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Leaflet;\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":21,"column":21,"nodeType":"57","endLine":21,"endColumn":33},{"ruleId":"58","severity":1,"message":"59","line":16,"column":8,"nodeType":"60","messageId":"61","endLine":16,"endColumn":22},{"ruleId":"51","replacedBy":"62"},{"ruleId":"53","replacedBy":"63"},{"ruleId":"58","severity":1,"message":"64","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":28},{"ruleId":"58","severity":1,"message":"65","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":24},{"ruleId":"66","severity":1,"message":"67","line":55,"column":8,"nodeType":"68","endLine":55,"endColumn":62,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'MarkerLocation' is defined but never used.","Identifier","unusedVar",["70"],["71"],"'useCallback' is defined but never used.","'NumericLiteral' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'markerLocation' and 'onLocationSelect'. Either include them or remove the dependency array. If 'onLocationSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [markerLocation, markerLocation.coords.lat, markerLocation.coords.lng, onLocationSelect]",{"range":"75","text":"76"},[1069,1123],"[markerLocation, markerLocation.coords.lat, markerLocation.coords.lng, onLocationSelect]"]